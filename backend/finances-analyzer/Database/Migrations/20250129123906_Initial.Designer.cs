// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(FinancesDbContext))]
    [Migration("20250129123906_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.BankingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BankingAccounts");
                });

            modelBuilder.Entity("Database.Entities.BankingAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AccountingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<int>("BankingAccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("BankingActionGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BankingAccountId");

                    b.HasIndex("BankingActionGroupId");

                    b.ToTable("BankingActions");
                });

            modelBuilder.Entity("Database.Entities.BankingActionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BankingActionGroups");
                });

            modelBuilder.Entity("Database.Entities.BankingAction", b =>
                {
                    b.HasOne("Database.Entities.BankingAccount", "BankingAccount")
                        .WithMany("BankingActions")
                        .HasForeignKey("BankingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.BankingActionGroup", "BankingActionGroup")
                        .WithMany("BankingActions")
                        .HasForeignKey("BankingActionGroupId");

                    b.Navigation("BankingAccount");

                    b.Navigation("BankingActionGroup");
                });

            modelBuilder.Entity("Database.Entities.BankingAccount", b =>
                {
                    b.Navigation("BankingActions");
                });

            modelBuilder.Entity("Database.Entities.BankingActionGroup", b =>
                {
                    b.Navigation("BankingActions");
                });
#pragma warning restore 612, 618
        }
    }
}
